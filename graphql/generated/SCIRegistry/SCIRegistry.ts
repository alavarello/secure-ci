// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddressesAddedToDomain extends ethereum.Event {
  get params(): AddressesAddedToDomain__Params {
    return new AddressesAddedToDomain__Params(this);
  }
}

export class AddressesAddedToDomain__Params {
  _event: AddressesAddedToDomain;

  constructor(event: AddressesAddedToDomain) {
    this._event = event;
  }

  get authorizer(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get domainOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get domain(): string {
    return this._event.parameters[2].value.toString();
  }

  get chainId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get contractAddresses(): Array<Address> {
    return this._event.parameters[4].value.toAddressArray();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SCIRegistry extends ethereum.SmartContract {
  static bind(address: Address): SCIRegistry {
    return new SCIRegistry("SCIRegistry", address);
  }

  authorizers(param0: BigInt): Address {
    let result = super.call("authorizers", "authorizers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_authorizers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "authorizers",
      "authorizers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasBeenWhitelisted(param0: string): boolean {
    let result = super.call(
      "hasBeenWhitelisted",
      "hasBeenWhitelisted(string):(bool)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toBoolean();
  }

  try_hasBeenWhitelisted(param0: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasBeenWhitelisted",
      "hasBeenWhitelisted(string):(bool)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasContract(chainId: BigInt, contractAddress: Address): boolean {
    let result = super.call(
      "hasContract",
      "hasContract(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(contractAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasContract(
    chainId: BigInt,
    contractAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasContract",
      "hasContract(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(contractAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasContractBeenWhitelisted(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "hasContractBeenWhitelisted",
      "hasContractBeenWhitelisted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasContractBeenWhitelisted(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasContractBeenWhitelisted",
      "hasContractBeenWhitelisted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasDomainBeenWhitelisted(param0: string): boolean {
    let result = super.call(
      "hasDomainBeenWhitelisted",
      "hasDomainBeenWhitelisted(string):(bool)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toBoolean();
  }

  try_hasDomainBeenWhitelisted(param0: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasDomainBeenWhitelisted",
      "hasDomainBeenWhitelisted(string):(bool)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDomainWhitelisted(domainName: string): boolean {
    let result = super.call(
      "isDomainWhitelisted",
      "isDomainWhitelisted(string):(bool)",
      [ethereum.Value.fromString(domainName)]
    );

    return result[0].toBoolean();
  }

  try_isDomainWhitelisted(domainName: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDomainWhitelisted",
      "isDomainWhitelisted(string):(bool)",
      [ethereum.Value.fromString(domainName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  whitelist(param0: string, param1: BigInt, param2: Address): boolean {
    let result = super.call(
      "whitelist",
      "whitelist(string,uint256,address):(bool)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_whitelist(
    param0: string,
    param1: BigInt,
    param2: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelist",
      "whitelist(string,uint256,address):(bool)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAddressesCall extends ethereum.Call {
  get inputs(): AddAddressesCall__Inputs {
    return new AddAddressesCall__Inputs(this);
  }

  get outputs(): AddAddressesCall__Outputs {
    return new AddAddressesCall__Outputs(this);
  }
}

export class AddAddressesCall__Inputs {
  _call: AddAddressesCall;

  constructor(call: AddAddressesCall) {
    this._call = call;
  }

  get authorizer(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get domain(): string {
    return this._call.inputValues[1].value.toString();
  }

  get chainId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class AddAddressesCall__Outputs {
  _call: AddAddressesCall;

  constructor(call: AddAddressesCall) {
    this._call = call;
  }
}

export class AddAuthorizerCall extends ethereum.Call {
  get inputs(): AddAuthorizerCall__Inputs {
    return new AddAuthorizerCall__Inputs(this);
  }

  get outputs(): AddAuthorizerCall__Outputs {
    return new AddAuthorizerCall__Outputs(this);
  }
}

export class AddAuthorizerCall__Inputs {
  _call: AddAuthorizerCall;

  constructor(call: AddAuthorizerCall) {
    this._call = call;
  }

  get authorizerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get authorizer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddAuthorizerCall__Outputs {
  _call: AddAuthorizerCall;

  constructor(call: AddAuthorizerCall) {
    this._call = call;
  }
}

export class HasContractCall extends ethereum.Call {
  get inputs(): HasContractCall__Inputs {
    return new HasContractCall__Inputs(this);
  }

  get outputs(): HasContractCall__Outputs {
    return new HasContractCall__Outputs(this);
  }
}

export class HasContractCall__Inputs {
  _call: HasContractCall;

  constructor(call: HasContractCall) {
    this._call = call;
  }

  get chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class HasContractCall__Outputs {
  _call: HasContractCall;

  constructor(call: HasContractCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IsDomainWhitelistedCall extends ethereum.Call {
  get inputs(): IsDomainWhitelistedCall__Inputs {
    return new IsDomainWhitelistedCall__Inputs(this);
  }

  get outputs(): IsDomainWhitelistedCall__Outputs {
    return new IsDomainWhitelistedCall__Outputs(this);
  }
}

export class IsDomainWhitelistedCall__Inputs {
  _call: IsDomainWhitelistedCall;

  constructor(call: IsDomainWhitelistedCall) {
    this._call = call;
  }

  get domainName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class IsDomainWhitelistedCall__Outputs {
  _call: IsDomainWhitelistedCall;

  constructor(call: IsDomainWhitelistedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
