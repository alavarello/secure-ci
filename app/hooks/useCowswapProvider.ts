import * as React from 'react'
import { type WalletClient, useWalletClient } from 'wagmi'
import {BrowserProvider} from 'ethers'
import {EthereumProvider} from "@cowprotocol/widget-lib";
import {JsonRpcRequest} from "@cowprotocol/widget-lib/types";
import {Dispatch, SetStateAction} from "react";
/***'86
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ,\\\[%\[&[[#@& @@@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ +\\\\+[\\[[[&%&@@& @@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ++\\\\[[\[[\\\[&@@@@& @@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ \\\[+\\\[\\[\\\%\\[%%%@,@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,\\[[[[\\\\[[[\\\+\[#&&@[%@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ \[#[[\\\[[[\[@%%%\&\[@@+@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ +[###[+\\\\[\#[\\[#[@&\@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,+[[[[[[\\\[\\[%%%#@@& @@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.[[[[[#\[[[[+\\[[[[@&[@@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ +[[[\[[[[[\+\++\%&&[ @@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&++\\\\[\[[\#\,,,\+\#[@@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ++,+\+++\\+[%#[[,++[%%@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.[\++++\++,++++\##%#.@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ \[##[++,,+\\%,,++[%,@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .+++\\+\[\[%[[%%\++# @@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ +,,[\++,,++,,,++\#%%%%%@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#+,[[\++++++[\#%%%+[%#%@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ \\\+\,+\[,+++[###%[%@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ +..,++\\[[#[+++[#+#+@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.\[\\#%%#%&[&@&[,+\#%.@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@@@@\.[\[\\+ [@@@@@@@@@@@@@@@@@@@@@@@@@@@ \,...,,+++\\\[[#[&\\[#.@@@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@@@ \\\+##%#[\\++++\ @@@@@@@@@@@@@@@@@@@@@ +\[#+,....,,,,+\&&#[\\#\ @@@@@@@@@@@@@@@@
 @@@@@@@@@@@@@+,,,..,,[[[########[#.@@@@@@@@@@@@@@@@@@ \,,..,,,,,,,,,,,++\++%+,.\[ @@@@@@@@@@@@@@
 @@@@@@@@@@@@@\+,+++\\[[[[[##%%&%%%% @@@@@@@@@@@@@@@@@ ,,,,,,,+,,+,,,.+,\\\+,+,.[[[[+@@@@@@@@@@@@
 @@@@@@@@@@@@ +++++++\#[[[+#%#[#%%%## @@@@@@@@@@@@@@@@@@ ,,,,.,,,.....,,++,,+++,[[[[[[ @@@@@@@@@@
 @@@@@@@@@@@@@.\++,,,,\,+\,,,.,,[%%### @@@@@@@@@@@@@@@@@@@@@@@         ++++\\...,,[[[[[[ @@@@@@@@
 @@@@@@@@@@@@@ \\\+.....+###++\[#&%%#%\%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,,,...,#+[[[[[[\@@@@@@
 @@@@@@@@@@@@@ +\++++,,\+\##%++[#&%%%%\ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@[,,,,,,...,,\[[[[[[ @@@@@
 @@@@@@@@@@@@@@,\\\+++.+.,,\%&\,,\%#%%#\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ,,,,,,...[[[[[[[+[ @@@@
 @@@@@@@@@@@@@@@,\\\+,,+++\+++\[+,#%##%\ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.,,.,,,...[\[[[[\[[ @@@
 @@@@@@@@@@@@@@@ +\\+.,,,+[[\[#%%%+####[[[\\+\ \,   ,+\\\\,\[[\+@@@@@@@@@@%+,,....,,..[[[[[\[[[@@
 @@@@@@@@@@@@@@@@@.\\+,+++,,[#%####\[[@[[[[[[\,.,+++++++++.+[[[[[\\\++ @@@@ ,,,,,.....,,++\\\[\@@
 @@@@@@@@@@@@@@@@@@[\++\+++,+,+[[[[#\@\[[[[\\\+,\+++++++++,,[[[[[[[[[[+  \@.,,,..,,........,\[[ @
 @@@@@@@@@@@@@@@@@@@ .\\\+++,,+\\\,%@@[[[\\,+[++++++,,,,++\.,\[,\++[\+\,,+\+,,,,........,,..+,+[+
 @@@@@@@@@@@@@@@+.,.++,\++++,,,,,[[[%#[[\\+++++\+\+.,,,,++++,.,[++,,,+,,,....,,,,,.......+++++[\
 @@@@@@@@@@@@@ ,,,.[,.,,++++,+,,,#\\+[\\+,,+,,++\\,.,,,,++[\+\[...,..,,......,,,,,...,+[#\\+++[[[
 @@@@@@@@@#.,,..,.#[\+,,,,,,++\\\\[[,,,,,,,\.,++\+....+,,++[,+[\ .......,................,\[[[[[[
 @@@@@@@.+,,,,,,..++\[+\\\,[+[[[[[[\,,,.,,,\..,+++,+\++,++++\.... ..........................+\[[[
 @@@@@ .,,,,,,,,.,+[[[[[+\@@#[[[[[[[\,,,,,,\..,+,,,,,,,,,.........  ........................,+\\,
 @@@@ ,,,,,,,,,.++\[[[[[\@@#[[#[[[[[[,,,.,,\..,,,,,,,,.............  ........................,,@@
 @@@@@,,,,,,,,++[[[[[[[[%&[#[#[[[[[[[,,,,,,+....,,.,,...............   .................,,. @@@@@
 @@@@.,,,,,,+.+\\[[[[[[[%[[[[[[[[[[[[+,.,,,,.....,..................,\.  .@@@@@@@@@@@@@@@@@@@@@@@
 @@@ ,,,,,,,.,\[[[[#&@[#[[[[[[[[[[[[[[,,.,......,,,,,..............., @@@@@@@@@@@@@@@@@@@@@@@@@@@
 @@@ ,,,,,,+,\[[[[[[[[#%#[[[[[[[[[[[[[,,,......,....,..............,,,[@@@@@@@@@@@@@@@@@@@@@@@@@@
 @@@.,,,,,,\\[[[[[[[[[[[[[[[[[[[[[[[[[\,,......,,,,...............,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@
 @@@.,,,,,++[[[[%@%[[[[[[[[[[###[[[[[[[,,.....,.,................,,,,,,.@@@@@@@@@@@@@@@@@@@@@@@@@
 @@@.,,,,,[\[[[[[[[[[[[[[[[[[[[[[[[[[[[\,,..........,,.........,,,,,,,,+,@@@@@@@@@@@@@@@@@@@@@@@@
 @@@,,,++,+\[[[[[[[[[[[[[[[[[[[[[[[[[[\\,,,...,...........,+\\\\[[[[[[[[\,@@@@@@@@@@@@@@@@@@@@@@@
 @ ,+,,,,\,[[[[[[[[[[[[[[[[[[[[[[[[[[\\\\,................,,+\\[[[[[[[[\\\ @@@@@@@@@@@@@@@@@@@@@@
  '23***/
// No trates de entenderlo, disfrutalo
class WalletProviderProxy implements EthereumProvider {
    constructor(private readonly provider: BrowserProvider,
                private readonly setContractAddress?: Dispatch<SetStateAction<string>>) {
    }

    request<T>(params: JsonRpcRequest): Promise<T> {
        if(params.method === "eth_sendTransaction") {
            console.log("eth_sendTransaction")
            const tx: { to: string } = <any>params.params[0]
            console.log(tx)
            if (tx.to !== "0x0") {
                this.setContractAddress && this.setContractAddress(tx.to)
            }
        }
        return this.provider.send(params.method, params.params);
    }

    enable(): Promise<void> {
        return Promise.resolve();
    }

    on(event: string, args: unknown): void {
    }
}

function walletClientToCowswapProvider(walletClient: WalletClient, setContractAddress?: Dispatch<SetStateAction<string>>): EthereumProvider {
    const { account, chain, transport } = walletClient
    const network = {
        chainId: chain.id,
        name: chain.name,
        ensAddress: chain.contracts?.ensRegistry?.address,
    }
    const provider = new BrowserProvider(transport, network)

    return new WalletProviderProxy(provider, setContractAddress);
}

/** Hook to convert a viem Wallet Client to an ethers.js Signer. */
export function useCowswapProvider({ chainId, setContractAddress }: { chainId?: number, setContractAddress?: Dispatch<SetStateAction<string>> } = {}) {
    const { data: walletClient } = useWalletClient({ chainId })
    return React.useMemo(
        () => (walletClient ? walletClientToCowswapProvider(walletClient, setContractAddress) : undefined),
        [walletClient],
    )
}