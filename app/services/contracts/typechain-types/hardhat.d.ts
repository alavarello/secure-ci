/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BytesUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BytesUtils__factory>;
    getContractFactory(
      name: "IBaseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseRegistrar__factory>;
    getContractFactory(
      name: "ENS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENS__factory>;
    getContractFactory(
      name: "ENSRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSRegistry__factory>;
    getContractFactory(
      name: "IMulticallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMulticallable__factory>;
    getContractFactory(
      name: "Multicallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicallable__factory>;
    getContractFactory(
      name: "ABIResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ABIResolver__factory>;
    getContractFactory(
      name: "AddrResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddrResolver__factory>;
    getContractFactory(
      name: "ContentHashResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContentHashResolver__factory>;
    getContractFactory(
      name: "DNSResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DNSResolver__factory>;
    getContractFactory(
      name: "IABIResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IABIResolver__factory>;
    getContractFactory(
      name: "IAddressResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressResolver__factory>;
    getContractFactory(
      name: "IAddrResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddrResolver__factory>;
    getContractFactory(
      name: "IContentHashResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContentHashResolver__factory>;
    getContractFactory(
      name: "IDNSRecordResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSRecordResolver__factory>;
    getContractFactory(
      name: "IDNSZoneResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSZoneResolver__factory>;
    getContractFactory(
      name: "IInterfaceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterfaceResolver__factory>;
    getContractFactory(
      name: "INameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameResolver__factory>;
    getContractFactory(
      name: "InterfaceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterfaceResolver__factory>;
    getContractFactory(
      name: "IPubkeyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPubkeyResolver__factory>;
    getContractFactory(
      name: "ITextResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITextResolver__factory>;
    getContractFactory(
      name: "IVersionableResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVersionableResolver__factory>;
    getContractFactory(
      name: "NameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameResolver__factory>;
    getContractFactory(
      name: "PubkeyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PubkeyResolver__factory>;
    getContractFactory(
      name: "TextResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TextResolver__factory>;
    getContractFactory(
      name: "PublicResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PublicResolver__factory>;
    getContractFactory(
      name: "ResolverBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolverBase__factory>;
    getContractFactory(
      name: "IReverseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReverseRegistrar__factory>;
    getContractFactory(
      name: "ReverseClaimer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReverseClaimer__factory>;
    getContractFactory(
      name: "IMetadataService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetadataService__factory>;
    getContractFactory(
      name: "INameWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameWrapper__factory>;
    getContractFactory(
      name: "INameWrapperUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameWrapperUpgrade__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AlwaysFalseAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlwaysFalseAuthorizer__factory>;
    getContractFactory(
      name: "AlwaysTrueAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlwaysTrueAuthorizer__factory>;
    getContractFactory(
      name: "EnsAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnsAuthorizer__factory>;
    getContractFactory(
      name: "Authorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authorizer__factory>;
    getContractFactory(
      name: "ISecureCIRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISecureCIRegistry__factory>;
    getContractFactory(
      name: "SCIRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SCIRegistry__factory>;

    getContractAt(
      name: "BytesUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BytesUtils>;
    getContractAt(
      name: "IBaseRegistrar",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseRegistrar>;
    getContractAt(
      name: "ENS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ENS>;
    getContractAt(
      name: "ENSRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSRegistry>;
    getContractAt(
      name: "IMulticallable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMulticallable>;
    getContractAt(
      name: "Multicallable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicallable>;
    getContractAt(
      name: "ABIResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ABIResolver>;
    getContractAt(
      name: "AddrResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AddrResolver>;
    getContractAt(
      name: "ContentHashResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContentHashResolver>;
    getContractAt(
      name: "DNSResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DNSResolver>;
    getContractAt(
      name: "IABIResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IABIResolver>;
    getContractAt(
      name: "IAddressResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressResolver>;
    getContractAt(
      name: "IAddrResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddrResolver>;
    getContractAt(
      name: "IContentHashResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IContentHashResolver>;
    getContractAt(
      name: "IDNSRecordResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSRecordResolver>;
    getContractAt(
      name: "IDNSZoneResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSZoneResolver>;
    getContractAt(
      name: "IInterfaceResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterfaceResolver>;
    getContractAt(
      name: "INameResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INameResolver>;
    getContractAt(
      name: "InterfaceResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InterfaceResolver>;
    getContractAt(
      name: "IPubkeyResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPubkeyResolver>;
    getContractAt(
      name: "ITextResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITextResolver>;
    getContractAt(
      name: "IVersionableResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVersionableResolver>;
    getContractAt(
      name: "NameResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NameResolver>;
    getContractAt(
      name: "PubkeyResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PubkeyResolver>;
    getContractAt(
      name: "TextResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TextResolver>;
    getContractAt(
      name: "PublicResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PublicResolver>;
    getContractAt(
      name: "ResolverBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolverBase>;
    getContractAt(
      name: "IReverseRegistrar",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IReverseRegistrar>;
    getContractAt(
      name: "ReverseClaimer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReverseClaimer>;
    getContractAt(
      name: "IMetadataService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetadataService>;
    getContractAt(
      name: "INameWrapper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INameWrapper>;
    getContractAt(
      name: "INameWrapperUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INameWrapperUpgrade>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AlwaysFalseAuthorizer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AlwaysFalseAuthorizer>;
    getContractAt(
      name: "AlwaysTrueAuthorizer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AlwaysTrueAuthorizer>;
    getContractAt(
      name: "EnsAuthorizer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EnsAuthorizer>;
    getContractAt(
      name: "Authorizer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Authorizer>;
    getContractAt(
      name: "ISecureCIRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISecureCIRegistry>;
    getContractAt(
      name: "SCIRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SCIRegistry>;

    deployContract(
      name: "BytesUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BytesUtils>;
    deployContract(
      name: "IBaseRegistrar",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseRegistrar>;
    deployContract(
      name: "ENS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENS>;
    deployContract(
      name: "ENSRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENSRegistry>;
    deployContract(
      name: "IMulticallable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMulticallable>;
    deployContract(
      name: "Multicallable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicallable>;
    deployContract(
      name: "ABIResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ABIResolver>;
    deployContract(
      name: "AddrResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddrResolver>;
    deployContract(
      name: "ContentHashResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContentHashResolver>;
    deployContract(
      name: "DNSResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DNSResolver>;
    deployContract(
      name: "IABIResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IABIResolver>;
    deployContract(
      name: "IAddressResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressResolver>;
    deployContract(
      name: "IAddrResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddrResolver>;
    deployContract(
      name: "IContentHashResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IContentHashResolver>;
    deployContract(
      name: "IDNSRecordResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDNSRecordResolver>;
    deployContract(
      name: "IDNSZoneResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDNSZoneResolver>;
    deployContract(
      name: "IInterfaceResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInterfaceResolver>;
    deployContract(
      name: "INameResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameResolver>;
    deployContract(
      name: "InterfaceResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterfaceResolver>;
    deployContract(
      name: "IPubkeyResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPubkeyResolver>;
    deployContract(
      name: "ITextResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITextResolver>;
    deployContract(
      name: "IVersionableResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVersionableResolver>;
    deployContract(
      name: "NameResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NameResolver>;
    deployContract(
      name: "PubkeyResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PubkeyResolver>;
    deployContract(
      name: "TextResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TextResolver>;
    deployContract(
      name: "PublicResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PublicResolver>;
    deployContract(
      name: "ResolverBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ResolverBase>;
    deployContract(
      name: "IReverseRegistrar",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReverseRegistrar>;
    deployContract(
      name: "ReverseClaimer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReverseClaimer>;
    deployContract(
      name: "IMetadataService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMetadataService>;
    deployContract(
      name: "INameWrapper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameWrapper>;
    deployContract(
      name: "INameWrapperUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameWrapperUpgrade>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "AlwaysFalseAuthorizer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlwaysFalseAuthorizer>;
    deployContract(
      name: "AlwaysTrueAuthorizer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlwaysTrueAuthorizer>;
    deployContract(
      name: "EnsAuthorizer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnsAuthorizer>;
    deployContract(
      name: "Authorizer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Authorizer>;
    deployContract(
      name: "ISecureCIRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISecureCIRegistry>;
    deployContract(
      name: "SCIRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SCIRegistry>;

    deployContract(
      name: "BytesUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BytesUtils>;
    deployContract(
      name: "IBaseRegistrar",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBaseRegistrar>;
    deployContract(
      name: "ENS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENS>;
    deployContract(
      name: "ENSRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENSRegistry>;
    deployContract(
      name: "IMulticallable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMulticallable>;
    deployContract(
      name: "Multicallable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicallable>;
    deployContract(
      name: "ABIResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ABIResolver>;
    deployContract(
      name: "AddrResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddrResolver>;
    deployContract(
      name: "ContentHashResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContentHashResolver>;
    deployContract(
      name: "DNSResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DNSResolver>;
    deployContract(
      name: "IABIResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IABIResolver>;
    deployContract(
      name: "IAddressResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressResolver>;
    deployContract(
      name: "IAddrResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddrResolver>;
    deployContract(
      name: "IContentHashResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IContentHashResolver>;
    deployContract(
      name: "IDNSRecordResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDNSRecordResolver>;
    deployContract(
      name: "IDNSZoneResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDNSZoneResolver>;
    deployContract(
      name: "IInterfaceResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInterfaceResolver>;
    deployContract(
      name: "INameResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameResolver>;
    deployContract(
      name: "InterfaceResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterfaceResolver>;
    deployContract(
      name: "IPubkeyResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPubkeyResolver>;
    deployContract(
      name: "ITextResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITextResolver>;
    deployContract(
      name: "IVersionableResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVersionableResolver>;
    deployContract(
      name: "NameResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NameResolver>;
    deployContract(
      name: "PubkeyResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PubkeyResolver>;
    deployContract(
      name: "TextResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TextResolver>;
    deployContract(
      name: "PublicResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PublicResolver>;
    deployContract(
      name: "ResolverBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ResolverBase>;
    deployContract(
      name: "IReverseRegistrar",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReverseRegistrar>;
    deployContract(
      name: "ReverseClaimer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReverseClaimer>;
    deployContract(
      name: "IMetadataService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMetadataService>;
    deployContract(
      name: "INameWrapper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameWrapper>;
    deployContract(
      name: "INameWrapperUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameWrapperUpgrade>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "AlwaysFalseAuthorizer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlwaysFalseAuthorizer>;
    deployContract(
      name: "AlwaysTrueAuthorizer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlwaysTrueAuthorizer>;
    deployContract(
      name: "EnsAuthorizer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnsAuthorizer>;
    deployContract(
      name: "Authorizer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Authorizer>;
    deployContract(
      name: "ISecureCIRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISecureCIRegistry>;
    deployContract(
      name: "SCIRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SCIRegistry>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
