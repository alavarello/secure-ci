/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SCIRegistry,
  SCIRegistryInterface,
} from "../../contracts/SCIRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "messageSender",
        type: "address",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
    ],
    name: "MessageSenderIsNotDomainOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "authorizer",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "domainOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "contractAddresses",
        type: "address[]",
      },
    ],
    name: "AddressesAddedToDomain",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "authorizer",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
    ],
    name: "addAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "authorizerId",
        type: "uint256",
      },
      {
        internalType: "contract Authorizer",
        name: "authorizer",
        type: "address",
      },
    ],
    name: "addAuthorizer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "authorizers",
    outputs: [
      {
        internalType: "contract Authorizer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "hasBeenWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "hasContract",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "hasContractBeenWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "hasDomainBeenWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domainName",
        type: "string",
      },
    ],
    name: "isDomainWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610cfe806100a56000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80639e7bb23311610081578063e5f5a8e91161005b578063e5f5a8e91461027d578063f2fde38b14610290578063f96f0359146102a357600080fd5b80639e7bb23314610213578063cde669bf14610226578063d55feec31461023957600080fd5b80638b69fb58116100b25780638b69fb58146101995780638da5cb5b146101c757806393d608be146101e557600080fd5b806311f6649b146100d9578063715018a6146101395780637375470614610143575b600080fd5b61010f6100e73660046107ab565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101416102d1565b005b6101896101513660046107e6565b600091825260016020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6040519015158152602001610130565b6101896101a73660046107e6565b600160209081526000928352604080842090915290825290205460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1661010f565b6101896101f33660046108f0565b805160208183018101805160028252928201919093012091525460ff1681565b610189610221366004610976565b6102e5565b6101416102343660046107e6565b610314565b6101896102473660046109b8565b82516020818501810180516004825292820195820195909520919094528352600091825260408083209093528152205460ff1681565b61014161028b366004610a13565b61036f565b61014161029e366004610ac5565b61067f565b6101896102b13660046108f0565b805160208183018101805160038252928201919093012091525460ff1681565b6102d96106e3565b6102e36000610736565b565b6000600283836040516102f9929190610ae9565b9081526040519081900360200190205460ff16905092915050565b61031c6106e3565b60009182526005602052604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b600086815260056020526040908190205490517d6e7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690616e75906103d890339089908990899089908990600401610b98565b6020604051808303816000875af11580156103f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041b9190610bee565b610460573385856040517f4feff09800000000000000000000000000000000000000000000000000000000815260040161045793929190610c10565b60405180910390fd5b600160038686604051610474929190610ae9565b90815260405190819003602001902080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090921691909117905560005b8181101561060b576001600487876040516104d1929190610ae9565b90815260200160405180910390206000868152602001908152602001600020600085858581811061050457610504610c49565b90506020020160208101906105199190610ac5565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016941515949094179093558683526001918290528220909185858581811061059157610591610c49565b90506020020160208101906105a69190610ac5565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558061060381610c78565b9150506104b5565b5082858560405161061d929190610ae9565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f53bfca5407caf6bbf1566ca0417b634573f2ddb71ec614b5412bf09efcbeaeef89868660405161066f93929190610cd7565b60405180910390a4505050505050565b6106876106e3565b73ffffffffffffffffffffffffffffffffffffffff81166106d7576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610457565b6106e081610736565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102e3576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610457565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156107bd57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146106e057600080fd5b600080604083850312156107f957600080fd5b82359150602083013561080b816107c4565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261085657600080fd5b813567ffffffffffffffff8082111561087157610871610816565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156108b7576108b7610816565b816040528381528660208588010111156108d057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561090257600080fd5b813567ffffffffffffffff81111561091957600080fd5b61092584828501610845565b949350505050565b60008083601f84011261093f57600080fd5b50813567ffffffffffffffff81111561095757600080fd5b60208301915083602082850101111561096f57600080fd5b9250929050565b6000806020838503121561098957600080fd5b823567ffffffffffffffff8111156109a057600080fd5b6109ac8582860161092d565b90969095509350505050565b6000806000606084860312156109cd57600080fd5b833567ffffffffffffffff8111156109e457600080fd5b6109f086828701610845565b935050602084013591506040840135610a08816107c4565b809150509250925092565b60008060008060008060808789031215610a2c57600080fd5b86359550602087013567ffffffffffffffff80821115610a4b57600080fd5b610a578a838b0161092d565b9097509550604089013594506060890135915080821115610a7757600080fd5b818901915089601f830112610a8b57600080fd5b813581811115610a9a57600080fd5b8a60208260051b8501011115610aaf57600080fd5b6020830194508093505050509295509295509295565b600060208284031215610ad757600080fd5b8135610ae2816107c4565b9392505050565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b85811015610b8d578135610b65816107c4565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610b52565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff87168152608060208201526000610bc8608083018789610af9565b8560408401528281036060840152610be1818587610b42565b9998505050505050505050565b600060208284031215610c0057600080fd5b81518015158114610ae257600080fd5b73ffffffffffffffffffffffffffffffffffffffff84168152604060208201526000610c40604083018486610af9565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cd0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b838152604060208201526000610c40604083018486610b4256fea164736f6c6343000814000a";

type SCIRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SCIRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SCIRegistry__factory extends ContractFactory {
  constructor(...args: SCIRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SCIRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SCIRegistry__factory {
    return super.connect(runner) as SCIRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SCIRegistryInterface {
    return new Interface(_abi) as SCIRegistryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SCIRegistry {
    return new Contract(address, _abi, runner) as unknown as SCIRegistry;
  }
}
