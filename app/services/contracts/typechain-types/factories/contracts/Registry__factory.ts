/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Registry, RegistryInterface } from "../../contracts/Registry";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "authorizer",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
    ],
    name: "addAddresses",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "authorizers",
    outputs: [
      {
        internalType: "contract Authorizer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "whitelist",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610810806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806311f6649b1461004657806314f2f34914610076578063e5f5a8e9146100a6575b600080fd5b610060600480360381019061005b9190610274565b6100d6565b60405161006d9190610320565b60405180910390f35b610090600480360381019061008b9190610481565b610109565b60405161009d91906104fe565b60405180910390f35b6100c060048036038101906100bb9190610579565b610161565b6040516100cd9190610638565b60405180910390f35b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000828051602081018201805184825260208301602085012081835280955050505050506020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b8383905081101561021c5783838281811061018757610186610653565b5b905060200201602081019061019c91906106ae565b6000876040516101ac919061074c565b9081526020016040518091039020600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061021490610792565b915050610169565b506001905095945050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6102518161023e565b811461025c57600080fd5b50565b60008135905061026e81610248565b92915050565b60006020828403121561028a57610289610234565b5b60006102988482850161025f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006102e66102e16102dc846102a1565b6102c1565b6102a1565b9050919050565b60006102f8826102cb565b9050919050565b600061030a826102ed565b9050919050565b61031a816102ff565b82525050565b60006020820190506103356000830184610311565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038e82610345565b810181811067ffffffffffffffff821117156103ad576103ac610356565b5b80604052505050565b60006103c061022a565b90506103cc8282610385565b919050565b600067ffffffffffffffff8211156103ec576103eb610356565b5b6103f582610345565b9050602081019050919050565b82818337600083830152505050565b600061042461041f846103d1565b6103b6565b9050828152602081018484840111156104405761043f610340565b5b61044b848285610402565b509392505050565b600082601f8301126104685761046761033b565b5b8135610478848260208601610411565b91505092915050565b6000806040838503121561049857610497610234565b5b600083013567ffffffffffffffff8111156104b6576104b5610239565b5b6104c285828601610453565b92505060206104d38582860161025f565b9150509250929050565b60006104e8826102a1565b9050919050565b6104f8816104dd565b82525050565b600060208201905061051360008301846104ef565b92915050565b600080fd5b600080fd5b60008083601f8401126105395761053861033b565b5b8235905067ffffffffffffffff81111561055657610555610519565b5b6020830191508360208202830111156105725761057161051e565b5b9250929050565b60008060008060006080868803121561059557610594610234565b5b60006105a38882890161025f565b955050602086013567ffffffffffffffff8111156105c4576105c3610239565b5b6105d088828901610453565b94505060406105e18882890161025f565b935050606086013567ffffffffffffffff81111561060257610601610239565b5b61060e88828901610523565b92509250509295509295909350565b60008115159050919050565b6106328161061d565b82525050565b600060208201905061064d6000830184610629565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61068b816104dd565b811461069657600080fd5b50565b6000813590506106a881610682565b92915050565b6000602082840312156106c4576106c3610234565b5b60006106d284828501610699565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561070f5780820151818401526020810190506106f4565b60008484015250505050565b6000610726826106db565b61073081856106e6565b93506107408185602086016106f1565b80840191505092915050565b6000610758828461071b565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061079d8261023e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036107cf576107ce610763565b5b60018201905091905056fea26469706673582212209a7e246546bfac344f92b4957ecc219d6eb85d24f8b4ea446ad321ce4b50499a64736f6c63430008130033";

type RegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registry__factory extends ContractFactory {
  constructor(...args: RegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Registry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Registry__factory {
    return super.connect(runner) as Registry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new Interface(_abi) as RegistryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Registry {
    return new Contract(address, _abi, runner) as unknown as Registry;
  }
}
